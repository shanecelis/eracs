#!./eracs -b -s ./avoids-obstacle-p
!#

(use-modules
 (emacsy emacsy)
 (logging)
 (ice-9 match)
 (system repl error-handling)
 (ice-9 getopt-long))

(define option-spec '((help (single-char #\h) (value #f))))
                    
(define options (getopt-long (program-arguments) option-spec))
(define args (option-ref options '() '()))

(define (help)
  (format (current-error-port) "usage: avoids-obstacle-p <file.bin> ...~%")
  (format (current-error-port) "usage: avoids-obstacle-p dirs <dir1> <dir2>~%")
  (quit))

(when (or (option-ref options 'help #f) (null? args))
  (help))

(define* (avoids-obstacle? input)
    (let ((weights (if (string? input) 
                     (read-brain input)
                     ;; else, assume it's a vector.
                     input)))
      (robot-avoids-obstacle? weights)))

(define (score-aggregate fn inputs)
    (receive (accum report) (make-averaging-fns fn)
      (for-each accum inputs)
      (report)))

(define (avoids-obstacles-aggregate inputs)
  (let ((p (score-aggregate 
            (lambda (a) (if (avoids-obstacle? a) 1.0 0.0)) inputs)))
    (format #t "Success rate is ~1,2f percent.~%" (* 100 p))
    p))

(define (files-in-dir dirname pattern)
  (let ((dir (opendir dirname))
        (filenames '()))
    (let loop ((filename (readdir dir)))
      (when (not (eof-object? filename))
        (if (string-match pattern filename)
            (cons! (format #f "~a/~a" dirname filename) filenames))
        (loop (readdir dir))))
    (closedir dir)
    filenames))

(call-with-error-handling 
 (lambda ()
   (if (string=? (car args) "dirs")
       (let ((p (score-aggregate (lambda (dir) (if (> (avoids-obstacles-aggregate (files-in-dir dir "individual[0-9]+.bin")) 0)
                                                 1.0
                                                 0.0)) (cdr args))))
         (format #t "Total success rate is ~1,2f percent.~%" (* 100 p)))
       (avoids-obstacles-aggregate args))
   (quit)))



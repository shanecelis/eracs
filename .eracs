; .eracs
;
; XXX Having dot files is probably a bad idea.  They should be more
; explicit and visible.
(use-modules (convenience-lambda)
             ((rnrs) #:select (vector-map vector-for-each mod))
             (system repl server)
             (zeroconf)
             (osc)
             (emacsy emacsy)
             (statprof)
             (logging))


(let ((orig emacsy-mode-line))
  (set! emacsy-mode-line 
        (lambda ()
          (with-buffer (recent-buffer)
                       (format #f "~a FPS ~1,0f sim-time ~1,1f short-time ~1,2f long-time ~1,1f" 
                               (orig) 
                               (get-parameter 'FPS) 
                               (let ((sim (current-sim))) (if sim (sim-time sim) 0.))
                               (time-loop-value (current-robot))
                               (long-time-loop-value (current-robot))
                  
                               )))))

(define-interactive (reload-log-config)
  (log4c-reread))

(let ((orig message))
  (set! message
        (lambda args
          (mylog "emacsy.message" pri-info (apply orig args)))))

(set! emacsy-log-error (lambda (format-msg . args)
                    (apply mylog "emacsy" pri-error format-msg args)))

(set! emacsy-log-warning (lambda (format-msg . args)
                    (apply mylog "emacsy" pri-warn  format-msg args)))

(set! emacsy-log-info (lambda (format-msg . args)
                    (apply mylog "emacsy" pri-info  format-msg args)))

(set! emacsy-log-debug (lambda (format-msg . args)
                    (apply mylog "emacsy" pri-debug  format-msg args)))


; (use-modules (system vm trace))
; (trace-calls-to-procedure make-stack)
(set! %load-hook (lambda (filename)
                   (mylog "load" pri-debug "Loading ~a .." filename)))
(define profile? #f)
(define spawn-threads? #t)

(define (stop-profiling)
    (statprof-stop)
    (statprof-display))

(when profile?
  (statprof-reset 0 50000 #t)
  (statprof-start)
  (add-hook! emacsy-terminate-hook stop-profiling))

;; Let's start a REPL.
(when (and spawn-threads? (not eracs-batch?))
  (spawn-server)
;; Let's start the OSC server and publish it.
  (start-osc-server)
  (spawn-publish-service "" "_osc._udp." "ERACS" 7770)
  ;; CTRL-c should still work but it doesn't after some threads are spawned.
  ;; This next line fixes that.
  #;(restore-signals))

(set-parameter! 'camera-position #(4 4 3))
(load "quadruped2.scm")
(load "active-preferences.scm")
(load "record-robot.scm")
(load "fitness-functions.scm")
(load "colors.scm")

(load "hill-climber.scm")
;(switch-to-brain low-level-brain)


;(optimize 1)
;(restore-signals)

#;(add-hook! post-window-open-hook 
           (lambda ()
             (randomize-brain)
             (set! (controller (current-robot)) run-nn-brain)
             (clear-brain)
             (set! (controller (current-robot)) ap-controller)) 
           #t)
;(load "beer-experiment.scm")

\subsection{Physics Buffer}

We'd like to have a physics buffer for ERACS rather than a text buffer.

<<file:physics-buffer.scm>>=
(define-module (physics-buffer)
  #:use-module (oop goops)
  #:use-module (scene-smob)
  #:use-module (bullet)
  #:use-module (camera)
  #:use-module (guile-user)
  #:use-module (emacsy emacsy)
  #:use-module (logging)
  #:export (paused? buffer-robot sim))

#;(define-class <void-class> (<class>))

#;(define-method (no-applicable-method (vo <void-class>) args)
  (mylog "void-class" pri-debug "called on ~S with args ~S" vo args)
  (if #f #f))

#;(define-method (apply-methods (vo <void-class>) (l <list>) args)
  (mylog "void-class" pri-debug "called on ~S with args ~S" vo args)
  (if #f #f))

#;(define-method (no-method (vo <void-class>) args)
  (mylog "void-class" pri-debug "no-method called on ~S with args ~S" vo args)
  (if #f #f))

#;(define-class <void-buffer> ()
  ;#:metaclass <void-class>
  
  )

#;(define-method (apply-generic (vo <void-buffer>) args)
  (mylog "void-class" pri-debug "apply-generic called on ~S with args ~S" vo args)
  (if #f #f))



;(other-name (make <void-buffer>))
;(buffer-name (make <void-buffer>))


(define-class-public <physics-buffer> (<scene-buffer>)
  (sim #:accessor sim #:init-keyword #:sim #:init-form (make-sim))
  (paused? #:accessor paused? #:init-value #f)
  (robot #:accessor buffer-robot #:init-value #f))


(define-method (initialize (obj <physics-buffer>) initargs)
  (next-method)
  (set! (local-keymap obj) eracs-mode-map)
  obj)


(define-public (current-sim)
  (if (is-a? (current-buffer) <physics-buffer>)
    (sim (current-buffer))
    #f))
<<+ Load scheme files.>>=
  scm_c_use_module("physics-buffer");
@ 

% -*- mode: Noweb; noweb-code-mode: scheme-mode -*-
\subsection{Camera Movement}

For the keybindings, we'll use the standard
bindings \verb|C-f|, \verb|C-b|, \verb|C-p|, \verb|C-n| for forward,
backward, up, and down with additional bindings \verb|C-i| and
\verb|C-o| for in and out.

<<file:camera.scm>>=
<<+ Lisp Preamble>>
<<Load modules.>>

<<Variables>>
<<Procedures>>
<<Key bindings>>
<<Variables>>=
(define-public eracs-mode-map (make-keymap))
(define-public post-window-open-hook (make-hook))
(define-public eracs-buffer #f)

(define-interactive (eracs-mode)
  (use-local-map eracs-mode-map))

(add-hook! post-window-open-hook
           (lambda ()
            (set! eracs-buffer (make <physics-buffer> 
                                   #:keymap eracs-mode-map 
                                   #:name "eracs"))
            (add-buffer! eracs-buffer)))
<<Key bindings>>=
;; Camera movement keys
(define-key eracs-mode-map (kbd "C-f") 'forward-camera-x)  ; forward
(define-key eracs-mode-map (kbd "C-b") 'backward-camera-x) ; backward
(define-key eracs-mode-map (kbd "C-p") 'forward-camera-y)  ; previous
(define-key eracs-mode-map (kbd "C-n") 'backward-camera-y) ; next
(define-key eracs-mode-map (kbd "C-i") 'backward-camera-z) ; in 
(define-key eracs-mode-map (kbd "C-o") 'forward-camera-z)  ; out
<<Procedures>>=
(define (move-camera i amount)
  (let ((r (get-parameter 'camera-position)))
    (vector-set! r i (+ amount (vector-ref r i)))
    (set-parameter! 'camera-position r)))

(define-variable scale-camera-movement 1 "Scales the camera movement by this amount.")

(define-interactive (forward-camera-x #:optional (n (universal-argument-pop!)))
  (move-camera 0 (* scale-camera-movement n)))

(define-interactive (forward-camera-y #:optional (n (universal-argument-pop!)))
  (move-camera 1 (* scale-camera-movement n)))

(define-interactive (forward-camera-z #:optional (n (universal-argument-pop!)))
  (move-camera 2 (* scale-camera-movement n)))

(define-interactive (backward-camera-x #:optional (n (universal-argument-pop!)))
  (forward-camera-x (- n)))

(define-interactive (backward-camera-y #:optional (n (universal-argument-pop!)))
  (forward-camera-y (- n)))

(define-interactive (backward-camera-z #:optional (n (universal-argument-pop!)))
  (forward-camera-z (- n)))



<<Load modules.>>=
(define-module (camera)
  #:use-module (oop goops)
  #:use-module (physics-buffer)
  #:use-module (vector-math)
  #:use-module (emacsy emacsy)
  #:use-module (convenience-lambda)
  #:use-module (guile-user)
  #:use-module (scene-smob)
  #:export (scale-camera-movement))
<<+ Load scheme files.>>=
scm_c_use_module("camera");
@ 

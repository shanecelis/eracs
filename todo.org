* TODO What parameters are required NSGA-II?
  - pop size (multiples of 4)
  - # of generations
  - # of objectives
  - # of constraints
  - # of real variables with lower and upper limits of each
  - Probability of crossover of real variable? (0.6-1.0)
  - probability of mutation 1/nreal
  - distribution index for crossover
* TODO fix error calculation
* TODO decide on the units to be used throughout the app
* TODO implement emacsy based on coroutines
* TODO implement some measures
  - [ ] robust
  - [ ] energy efficiency
  - [ ] stability
  - [ ] drag
  - [ ] eccentricity of path
* TODO add labels to legends in gnuplot output.
* TODO Gosh, do I want to somehow just use Mathematica here?
    
** What should the Scheme interface look like?
   Limit it to a real valued search.
   (nsga-ii-search fitness-function #:objective-count 2 
                                    #:gene-count 10 
                                    #:population-count 10 
                                    #:max-generations 10)
   (fitness-function real-vector) ; -> real-vector
   
** What is required for a robot?
   bodies
   joints
   controller-fn
   sensor-fn

   What should be swappable?

   robot has bodies and joints

   (controller-fn robot (sensor-fn robot))
   
* What's a better way to handle OSC updates?
  (make <osc-registry> #:host host #:port port)
  (osc-register reg path getter setter)
  (osc-push reg)
  (osc-pull reg)

* DEMO
  M-x switch-to-brain ap-brain

  Hit record, move a leg.

  Train the NN.

  M-x ap-train

  Optimize in NSGA-II.

  M-x optimize 10

  Start over.

  M-x switch-to-brain ap-brain
* TODO after GECCO
  - [ ] have backtraces go to logs
  - [ ] get rid of noise in emacsy
  - [ ] implement coroutines in Guile using [[http://www.lua.org/manual/5.2/manual.html][Lua API]] and [[http://wingolog.org/archives/2011/08/30/the-gnu-extension-language][this]] as a basis
  - [ ] make debugging work in emacsy
  - [ ] fix kill of all buffers bug
  - [ ] fix extra renderers being added when physics-add-scene is called
  - [ ] fix segfault when restart-physics is called
* TODO before GECCO
  - [X] fix the scene since it's not displaying
  - [X] write up the gameplan low-level vs high-level
  - [X] make physics objects unmoveable from scheme
  - [X] change the time units to actual seconds
  - [X] have some way of creating a scene of physical objects
    init-scene
  - [X] make the obstacles and target unmoveable
  - [ ] implement high-level waypoint fitness function
  - [ ] determine the spatial dimensional units.
  - [ ] fix error calculation in active user preferences
  - [ ] fix rigid body sim deletion race condition
the physics sim may currently be deleted before the rigid bodies have
been deleted. If that happens, bad things happen.

* TODO What parameters are required NSGA-II?
  - pop size (multiples of 4)
  - # of generations
  - # of objectives
  - # of constraints
  - # of real variables with lower and upper limits of each
  - Probability of crossover of real variable? (0.6-1.0)
  - probability of mutation 1/nreal
  - distribution index for crossover
* TODO fix error calculation
* TODO decide on the units to be used throughout the app
* TODO implement emacsy based on coroutines
* TODO implement some measures
  - [ ] robust
  - [ ] energy efficiency
  - [ ] stability
  - [ ] drag
  - [ ] eccentricity of path
* TODO add labels to legends in gnuplot output.
* TODO Gosh, do I want to somehow just use Mathematica here?
    
** What should the Scheme interface look like?
   Limit it to a real valued search.
   (nsga-ii-search fitness-function #:objective-count 2 
                                    #:gene-count 10 
                                    #:population-count 10 
                                    #:max-generations 10)
   (fitness-function real-vector) ; -> real-vector
   
** What is required for a robot?
   bodies
   joints
   controller-fn
   sensor-fn

   What should be swappable?

   robot has bodies and joints

   (controller-fn robot (sensor-fn robot))
   
* What's a better way to handle OSC updates?
  (make <osc-registry> #:host host #:port port)
  (osc-register reg path getter setter)
  (osc-push reg)
  (osc-pull reg)

* DEMO
  M-x switch-to-brain ap-brain

  Hit record, move a leg.

  Train the NN.

  M-x ap-train

  Optimize in NSGA-II.

  M-x optimize 10

  Start over.

  M-x switch-to-brain ap-brain
* TODO after GECCO
  - [ ] have backtraces go to logs
  - [ ] get rid of noise in emacsy (noise?) log noise?
  - [ ] implement coroutines in Guile using [[http://www.lua.org/manual/5.2/manual.html][Lua API]] and [[http://wingolog.org/archives/2011/08/30/the-gnu-extension-language][this]] as a basis
  - [ ] make debugging work in emacsy
  - [ ] fix kill of all buffers bug
  - [X] fix extra renderers being added when physics-add-scene is called DOUBLE DRAWING!
  - [X] fix segfault when restart-physics is called
  - [ ] add universal argument C-u
  - [X] fix vlref actors so that when they're garbage collected
    They'll be removed from the scene.
  - [ ] make a cut/cute that works with (cut + 1 (+ 1 <>)) Maybe.
  - [ ] clear the echo area once other messages start to come.
  - [ ] let the minibuffer resize when necessary
  - [ ] viewport should be in window; scene should be in buffer
  - [ ] write an interactive scm-to-c and c-to-scm that will translate
    scm_blah_dee_dah to blah-dee-dah and back
  - [ ] implement a <void-object> so I can implement a <void-buffer> and <void-sim>
    and don't have to check for #f everywhere.
  - [ ] figure out how to integrate a browser window, it'll show pdf
    graphs, images, etc. too!
  - [ ] implement void-class
  - [ ] implement separate histories for read-from-minibuffer
  - [ ] there should be a way to turn off the display/runloop from happening.

  - [ ] do buffer-local variables using dynamically created modules for each buffer
    
    Some good things to know.
(define the-root-module
  (let ((m (make-module 0)))
    (set-module-obarray! m (%get-pre-modules-obarray))
    (set-module-name! m '(guile))
    (set-system-module! m #t)
    m))
  - [ ] cut <...> DOES NOT WORK!
  - [ ] make emacsy work with copy/paste [[http://stackoverflow.com/questions/6888862/how-to-access-clipboard-data-programmatically][link]]
  - [ ] determine the spatial dimensional units.

* TODO before GECCO
  - [X] fix the scene since it's not displaying
  - [X] write up the gameplan low-level vs high-level
  - [X] make physics objects unmoveable from scheme
  - [X] change the time units to actual seconds
  - [X] have some way of creating a scene of physical objects
    init-scene
  - [X] make the obstacles and target unmoveable
  - [X] fix rigid body sim deletion race condition
  - [X] implement high-level waypoint fitness function
  - [X] fix problem when # of objectives /= 2
  - [X] need to be able to see prior evaluations
  - [X] plot fitness correctly: need to know what's being minimized
    and maximized; need axes labels.
  - [X] save binary vector values for the NN

  - [X] rename fitness functions so they can be more easily understood
  - [X] run some tests using the high level waypoint
  - [X] write a script to run an automated test.
  - [X] there's a memory leak somewhere
    potential places
    - [X] why are any rigid bodies being free'd when I run dummy-fitness?
  - [X] determine how small of a NN we can use and have AP work
       Make this an automatic execution.
  - [X] Turn off the OSC discovery stuff when run in batch mode
  - [X] expose batch mode to the rest of the system
  - [X] input some initial AP values then save them, so they are easy
    to reload.
  - [X] define how to exercise AP: just do the simple initial one.
  - [ ] fix error calculation in active user preferences
  - [ ] write the methods section
  - [ ] write the introduction
  - [X] write a (uniq) function so that the same individual isn't
        recorded multiple times.
  - [X] should the neural network have a target sensor?
  - [ ] should the neural network have a more long range timer?




* TODO What parameters are required NSGA-II?
  - pop size (multiples of 4)
  - # of generations
  - # of objectives
  - # of constraints
  - # of real variables with lower and upper limits of each
  - Probability of crossover of real variable? (0.6-1.0)
  - probability of mutation 1/nreal
  - distribution index for crossover
* TODO fix error calculation
* TODO decide on the units to be used throughout the app
* TODO implement emacsy based on coroutines
* TODO implement some measures
  - [ ] robust
  - [ ] energy efficiency
  - [ ] stability
  - [ ] drag
  - [ ] eccentricity of path
* TODO add labels to legends in gnuplot output.
* TODO Gosh, do I want to somehow just use Mathematica here?

    
** What should the Scheme interface look like?
   Limit it to a real valued search.
   (nsga-ii-search fitness-function #:objective-count 2 
                                    #:gene-count 10 
                                    #:population-count 10 
                                    #:max-generations 10)
   (fitness-function real-vector) ; -> real-vector
   
** What is required for a robot?
   bodies
   joints
   controller-fn
   sensor-fn

   What should be swappable?

   robot has bodies and joints

   (controller-fn robot (sensor-fn robot))
   
* What's a better way to handle OSC updates?
  (make <osc-registry> #:host host #:port port)
  (osc-register reg path getter setter)
  (osc-push reg)
  (osc-pull reg)

* DEMO
  M-x switch-to-brain ap-brain

  Hit record, move a leg.

  Train the NN.

  M-x ap-train

  Optimize in NSGA-II.

  M-x optimize 10

  Start over.

  M-x switch-to-brain ap-brain
* TODO after GECCO
  - [X] fix extra renderers being added when physics-add-scene is called DOUBLE DRAWING!
  - [X] fix segfault when restart-physics is called
  - [X] fix vlref actors so that when they're garbage collected
    They'll be removed from the scene.
  - [ ] make a cut/cute that works with (cut + 1 (+ 1 <>)) Maybe.
  - [ ] let the minibuffer resize when necessary
  - [ ] viewport should be in window; scene should be in buffer
  - [ ] write an interactive scm-to-c and c-to-scm that will translate
    scm_blah_dee_dah to blah-dee-dah and back
  - [ ] implement a <void-object> so I can implement a <void-buffer> and <void-sim>
    and don't have to check for #f everywhere.
  - [ ] implement void-class
  - [ ] do buffer-local variables using dynamically created modules for each buffer
    
    Some good things to know.
(define the-root-module
  (let ((m (make-module 0)))
    (set-module-obarray! m (%get-pre-modules-obarray))
    (set-module-name! m '(guile))
    (set-system-module! m #t)
    m))
  - [ ] cut <...> DOES NOT WORK!
  - [ ] determine the spatial dimensional units.
  - [ ] restarting physics doesn't clear fixed bodies from graphics
    (nor do I know if they're cleared from the simulation)
  - [ ] look at coursera mobile robotics
  - [ ] I should stop evolving once I hit my success condition--oops
  - [ ] Emacsy licensing [[http://ext.ensible.com/store/][Something like these guys?]]
  - [ ] How to [[http://stackoverflow.com/questions/6201339/a-clean-system-for-github-pages-with-local-plugins][use local plugins for github pages]] along with a script in [[https://gist.github.com/ryanjm/2628759][gist]]

* TODO before GECCO
  - [X] fix the scene since it's not displaying
  - [X] write up the gameplan low-level vs high-level
  - [X] make physics objects unmoveable from scheme
  - [X] change the time units to actual seconds
  - [X] have some way of creating a scene of physical objects
    init-scene
  - [X] make the obstacles and target unmoveable
  - [X] fix rigid body sim deletion race condition
  - [X] implement high-level waypoint fitness function
  - [X] fix problem when # of objectives /= 2
  - [X] need to be able to see prior evaluations
  - [X] plot fitness correctly: need to know what's being minimized
    and maximized; need axes labels.

  - [X] save binary vector values for the NN
  - [X] rename fitness functions so they can be more easily understood
  - [X] run some tests using the high level waypoint
  - [X] write a script to run an automated test.
  - [X] there's a memory leak somewhere
    potential places
    - [X] why are any rigid bodies being free'd when I run dummy-fitness?
  - [X] determine how small of a NN we can use and have AP work
       Make this an automatic execution.
  - [X] Turn off the OSC discovery stuff when run in batch mode
  - [X] expose batch mode to the rest of the system
  - [X] input some initial AP values then save them, so they are easy
    to reload.
  - [X] define how to exercise AP: just do the simple initial one.
  - [X] fix error calculation in active user preferences
  - [X] write a (uniq) function so that the same individual isn't
        recorded multiple times.
  - [X] should the neural network have a target sensor?
  - [X] should the neural network have a more long range timer?
  - [X] test other values of alpha
  - [X] write a robot-avoids-obstacle? success condition.
  - [X] try the jumping task? NOPE
  - [X] write the introduction
  - [X] write the methods section
  - [X] missing ap-passive-29 from results
  - [ ] finish up the low-level section
  - [ ] reference mouret
  - [ ] reference von Ahn
  - [ ] write the results section
  - [ ] write the discussion section
  - [X] include Greg as an author? YES
  - [X] submit to GECCO (thursday midnight)

Good set of articles on [[http://www.freesoftwaremagazine.com/articles/catalog_of_reusable_solutions][autotools]]

* Results for jump

Ten trials for each, with a population size of 10, 50 generations,
using NSGA-II.  Success is defined as the robot being on the other
side of the gap at the end of the simulation and with a y coordinate
above zero.

- Results for AP (no passive) case is 30% success rate of crossing width 1 gap.

- Results for control case is 0% success rate of crossing width 1 gap.

- Results for HLWP case is 0% success rate of crossing width 1 gap.


- Results for AP (no passive) case is 0% success rate of crossing width 2 gap.

- Results for control case is 0% success rate of crossing width 2 gap.

- Results for HLWP case is 0% success rate of crossing width 2 gap.


- Results for AP (no passive) case is 0% success rate of crossing width 3 gap.

- Results for control case is 0% success rate of crossing width 3 gap.

- Results for HLWP case is 0% success rate of crossing width 3 gap.


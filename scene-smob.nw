% -*- mode: Noweb; noweb-code-mode: c-mode -*-
\subsection{Scene SMOB}

SMOBs are simple objects that GNU Guile uses to wrap \verb|C/C++|
objects into something that is Scheme friendly.  SMOBs are garbage
collected.  We'll define two types of SMOBs: Scene, and
constraint (or joint).  

<<file:scene-smob.h>>=
#ifndef _SCENE_SMOB_H_
#define _SCENE_SMOB_H_
#ifndef SCM_MAGIC_SNARFER

#include "vl.h"
#include <vlGraphics/RenderingTree.hpp>
#include <vlGraphics/Rendering.hpp>
#include <vlGraphics/OpenGLContext.hpp>
#include <vlGraphics/SceneManagerActorTree.hpp>
#include "vlref-smob.hpp"
#include "render.h"
#include "util.h"
#include "util-cpp.hpp"
#endif
#include <libguile.h>

extern vl::ref<vl::OpenGLContext> glcontext;

struct scene {
vl::ref<vl::RenderingTree> main_rendering; 
vl::ref<vl::SceneManagerActorTree> scene_manager;
vl::ref<vl::Rendering> rendering; 
vl::vec3 eye;
vl::vec3 center;
vl::vec3 up;
double render_fps;
int flags;
};

void init_scene_type(void);
SCM _init_scene_type(void*);
void init_glcontext(void);
struct scene* unwrap_scene(SCM scene);
SCM scm_wrap_scene(struct scene*);
SCM scm_make_scene();
SCM scm_current_scene();
struct scene* scm_c_current_scene();

SCM scm_recent_scene();
struct scene* scm_c_recent_scene();
#endif /* _SCENE_SMOB_H_ */
@ %def scene
<<file:scene-smob.cpp>>=

<<+ Preamble>>

<<Includes>>

<<State>>

<<Helper Functions>>

<<Functions>>

/* SMOB Functions */
<<Free>>
<<Mark>>
<<Print>>

<<Primitives>>

<<Initialize.>>

@ 
<<Includes>>=

#include <vlCore/VisualizationLibrary.hpp>
#include <vlCore/Time.hpp>
#include <vlGraphics/Geometry.hpp>
#include <vlGraphics/GeometryPrimitives.hpp>
#include <vlGraphics/Light.hpp>
#include <vlGraphics/Text.hpp>
#include <vlGraphics/FontManager.hpp>
#include <libguile.h>
#include "dummy-opengl-context.hpp"
#include "util.h"
#include "scene-smob.h"
#include "logging.h"
@ All SMOBs must implement three functions: \verb|free|, \verb|mark| ,
and \verb|print|.

<<Free>>=

static size_t free_scene (SCM scene_smob)
{
  struct scene *scene = (struct scene *) SCM_SMOB_DATA (scene_smob);
  scene->main_rendering = 0;
  scene->rendering = 0;
  scene->scene_manager = 0;
  scm_gc_free (scene, sizeof (struct scene), "scene");
  return 0;
}
@ We want to mark all the living objects so that they will not be
garbage collected.  This will be called often for objects that are
live.

<<Mark>>=

static SCM mark_scene (SCM scene_smob)
{
  //fprintf(stderr, "mark_scene\n");
  /* Mark the scene's name and update function.  */
  struct scene *scene = (struct scene *) SCM_SMOB_DATA (scene_smob);
     
  //scm_gc_mark (scene->name);
  //return (scene->contact_func); // will recurse and mark these
     
  return SCM_BOOL_F;
}
@ When the smob is printed to string, say on the REPL, it will use
whatever this function produces.  The convention for non-readable
objects is to format it as \verb|#<smob-name other details...>#|.

<<Print>>=

static int print_scene (SCM scene_smob, SCM port, scm_print_state *pstate)
{
  struct scene *scene = (struct scene *) SCM_SMOB_DATA (scene_smob);
     
  scm_puts ("#<scene ", port);
  //scm_display (scene->name, port);
  scm_puts (">", port);
     
  /* Non-zero means success. */
  return 1;
}
@ Let's register this new SMOB type and its associated functions with
Guile.  That requires we keep a ``tag'' to identify our SMOB from
others.

<<State>>=
vl::ref<vl::OpenGLContext> glcontext;
static scm_t_bits scene_tag;
<<Initialize.>>=

SCM _init_scene_type(void* context)
{
  // I need to load these inside the (scene-smob) module not whatever the current module is.
#ifndef SCM_MAGIC_SNARFER 
#include "scene-smob.cpp.x" 
#endif
  scene_tag = scm_make_smob_type ("scene", sizeof (struct scene));
  scm_set_smob_mark (scene_tag, mark_scene);
  scm_set_smob_free (scene_tag, free_scene);
  scm_set_smob_print (scene_tag, print_scene);
  return SCM_UNSPECIFIED;
}

void init_scene_type(void)
{
  scm_c_call_with_current_module(scm_c_resolve_module("scene-smob"), _init_scene_type, NULL);
}


void init_glcontext()
{
  if (! glcontext)
    glcontext = new DummyOpenGLContext;
}
<<Primitives>>=
SCM scm_wrap_scene(struct scene *sc)
{
  SCM smob;
  SCM_NEWSMOB (smob, scene_tag, sc);
     
  return smob;  
}
@
<<Primitives>>=
// XXX Rename this to make-box or include a parameter for shape.
SCM_DEFINE (scm_make_scene, "make-scene", 0, 0, 0,
            (),
            "Make a scene.")
{
  struct scene *sc;
     
  /* Step 1: Allocate the memory block.
   */
  sc = (struct scene *)
    scm_gc_malloc (sizeof (struct scene), "scene");
  mylog("scene-smob", PRI_DEBUG, "making scene 0x%x", sc);
     
  /* Step 2: Initialize it with straight code.
   */
  sc->main_rendering = new vl::RenderingTree();
  sc->scene_manager = new vl::SceneManagerActorTree;
  sc->rendering = new vl::Rendering();
  vl::vec4 background_color(61.f/255.f, 110.f/255.f, 203/255.f, 1.f);
  sc->rendering->camera()->viewport()->setClearColor(background_color);
  if (glcontext)
    sc->rendering->renderer()->setFramebuffer(glcontext->framebuffer());
  sc->rendering->sceneManagers()->push_back(sc->scene_manager.get());
  sc->main_rendering->subRenderings()->push_back(sc->rendering.get());
  sc->eye    = vl::vec3(0,10,10);
  sc->center = vl::vec3(0, 0, 0); 
  sc->up     = vl::vec3(0, 1, 0);
  sc->render_fps = 0.0;
  sc->flags = 0;

  // XXX Yuck
  scene_set_viewport(sc, 640, 440, 0, 40);
  
  return scm_wrap_scene(sc);
}
@ 

\todo{XXX This should check if the vlref is an actor.}
<<Primitives>>=
SCM_DEFINE (scm_remove_actor, "remove-actor", 2, 0, 0,
            (SCM scene, SCM actor),
            "Remove actor from the scene.")
{
    struct scene *sc = unwrap_scene(scene);
    struct vlref *ref = unwrap_vlref(actor);
    sc->scene_manager->tree()->eraseActor((vl::Actor *) ref->object);
    return SCM_UNSPECIFIED;
}
@ 


<<Primitives>>=
<<Cleanup Hook>>

SCM_DEFINE (scm_add_line, "add-line", 2, 1, 0,
            (SCM scene, SCM points, SCM color),
            "Add a line to the scene; return actor. Expects a scene object, a list of size three vectors, and a size 4 vector for color optionally.")
  // displays a closed or open path, with or without points
//  vl::Actor* showPath(const std::vector<vl::fvec3>& ctrl_points, const vl::fvec4& color, bool points=false, bool loop=false)
{
    struct scene *sc = unwrap_scene(scene);
    // Simple effect
    vl::vec4 colorx;
    if (SCM_UNBNDP(color)) {
      colorx = vl::white;
    } else {
      colorx = vector_to_vl_vec4(color);
    }
    vl::ref<vl::Effect> effect = new vl::Effect;
    effect->shader()->enable(vl::EN_DEPTH_TEST);
    effect->shader()->gocPointSize()->set(4);
    effect->shader()->gocColor()->setValue(colorx);

    // Generates the line/points geometry.
    vl::ref<vl::Geometry>   geom       = new vl::Geometry;
    vl::ref<vl::ArrayFloat3> vert_array = new vl::ArrayFloat3;
    geom->setVertexArray( vert_array.get() );
    size_t i = 0;
    size_t len = scm_c_length(points);
    std::vector<vl::vec3> v(len);
    //vert_array->resize(len);
    while (i < len && scm_is_pair(points)) {
      SCM value = scm_car(points);
      v[i] = vector_to_vl_vec3(value);
      points = scm_cdr(points);
      i++;
    }
    vert_array->initFrom(v);
    
    //vert_array->initFrom(ctrl_points);
    geom->drawCalls()->push_back(
      new vl::DrawArrays(vl::PT_LINE_STRIP, 0, (int)vert_array->size()));
//    if (points) 
//      geom->drawCalls()->push_back(new vl::DrawArrays(vl::PT_POINTS, 0, (int)vert_array->size()));

    // Adds the geometry to the scene.
    SCM actor = scm_c_wrap_vlref(sc->scene_manager->tree()->addActor( geom.get(), effect.get(), NULL), "actor", "line");
    <<Add a cleanup hook.>>
    return actor;
  }
@ 

<<Primitives>>=
SCM_DEFINE (scm_add_sphere, "add-sphere", 2, 2, 0,
            (SCM scene, SCM origin, SCM radius, SCM color),
            "Add a sphere to the scene; return actor. Expects a scene object, an origin vector, and a size 4 vector for color optionally.")
  // displays a closed or open path, with or without points
//  vl::Actor* showPath(const std::vector<vl::fvec3>& ctrl_points, const vl::fvec4& color, bool points=false, bool loop=false)
{
    struct scene *sc = unwrap_scene(scene);
    // Simple effect
    vl::vec4 colorx;
    if (SCM_UNBNDP(color)) {
      colorx = vl::white;
    } else {
      colorx = vector_to_vl_vec4(color);
    }

    double r;
    if (SCM_UNBNDP(radius)) {
      r = 1.0;
    } else {
      r = scm_to_double(radius);
    }

    vl::ref<vl::Effect> effect = new vl::Effect;
    effect->shader()->enable(vl::EN_DEPTH_TEST);
    effect->shader()->gocPointSize()->set(4);
    effect->shader()->gocColor()->setValue(colorx);

    // Generates the line/points geometry.
    vl::vec3 o = vector_to_vl_vec3(origin);
    // XXX VisualizationLibrary has a bug where it says it's accepting the radius,
    // but it's actually the diameter.
    vl::ref<vl::Geometry>   geom       = vl::makeUVSphere(o,r * 2.);

    // Adds the geometry to the scene.
    SCM actor = scm_c_wrap_vlref(sc->scene_manager->tree()->addActor( geom.get(), effect.get(), NULL), "actor", "sphere");
    <<Add a cleanup hook.>>
    return actor;
  }
@ 


<<Add a cleanup hook.>>=
struct vlref* vlref = unwrap_vlref(actor);
scm_c_hook_add(&(vlref->before_free_hook), remove_actor_hook, (void *)scene, 1);
@ 

<<Cleanup Hook>>=
void *remove_actor_hook(void *hook_data, void *func_data, void *data)
{
  SCM scene = (SCM) func_data;
  SCM actor = (SCM) data;
  scm_remove_actor(scene, actor);
  return (void *)1;
}

<<+ Initialize submodules.>>=
init_scene_type();
<<+ Include submodules.>>=

#include "scene-smob.h"
#include "vlref-smob.hpp"
@ 

<<Functions>>=
struct scene* unwrap_scene(SCM scene_smob)
{
  scm_assert_smob_type(scene_tag, scene_smob);
  return (struct scene*) SCM_SMOB_DATA(scene_smob);
}
@

We want to be able to get the current scene of the buffer in C.

<<Functions>>=
SCM scm_current_scene()
{
    return scm_call_0(scm_c_public_ref("scene-smob",
                                       "current-scene"));
}

struct scene* scm_c_current_scene()
{
  SCM scene = scm_current_scene();
  if (! scm_is_false(scene))
    return unwrap_scene(scene);
  else
    return NULL;
}
@

<<Functions>>=
SCM scm_recent_scene()
{
    return scm_call_0(scm_c_public_ref("scene-smob",
                                       "recent-scene"));
}

struct scene* scm_c_recent_scene()
{
  SCM scene = scm_recent_scene();
  if (! scm_is_false(scene))
    return unwrap_scene(scene);
  else
    return NULL;
}
@
\subsection{Camera Manipulation}

\todo{This is currently handled in primitive-procedures, but it should
  be ripped out of there.}

<<Primitives>>=
SCM_DEFINE (scm_set_scene_parameter_x, "set-scene-parameter!", 
           /* required args */ 3, 
           /* optional args */ 0, 
           /* rest args?    */ 0,
            (SCM scene_smob, SCM name, SCM value),
            "Set the parameter for a scene like camera position, target, and up for instance.")
{
  char *str = scm_to_locale_string(scm_symbol_to_string(name));
  struct scene *scene;
  scene = unwrap_scene(scene_smob);
  if (strcmp("camera-target", str) == 0) {
    scene->center = vector_to_vl_vec3(value);
    scene_update_camera(scene);
    return SCM_UNSPECIFIED;
  } else if (strcmp("camera-position", str) == 0) {
    scene->eye =  vector_to_vl_vec3(value);
    scene_update_camera(scene);
    return SCM_UNSPECIFIED;
  } else if (strcmp("camera-up", str) == 0) {
    scene->up = vector_to_vl_vec3(value);
    scene_update_camera(scene);
    return SCM_UNSPECIFIED;
  } else
    scm_throw(scm_c_string_to_symbol("invalid-parameter"), SCM_EOL);
  return SCM_BOOL_F;
}
@ 

<<Primitives>>=
SCM_DEFINE (scm_scene_parameter, "scene-parameter", 2, 0, 0,
            (SCM scene_smob, SCM name),
            "Get simulation parameter.")
{
  char *str = scm_to_locale_string(scm_symbol_to_string(name));
  struct scene *scene;
  scene = unwrap_scene(scene_smob);
  if (strcmp("FPS", str) == 0) {
    return scm_from_double(scene->render_fps);
  } else if (strcmp("camera-position", str) == 0) {
    return vl_vec3_to_vector(scene->eye);
  } else if (strcmp("camera-target", str) == 0) {
    return vl_vec3_to_vector(scene->center);
  } else if (strcmp("camera-up", str) == 0) {
    return vl_vec3_to_vector(scene->up);
  } else
    scm_throw(scm_c_string_to_symbol("invalid-parameter"), SCM_EOL);
  return SCM_BOOL_F;
}
@ 

\subsection{Updating Actors}

So far we've allowed the drawing and removing of actors.  However,
this seems to have an adverse effect on performance, so I want to try
being able to update an existing actor.

<<Primitives>>=
SCM_DEFINE (scm_update_line, "update-line", 2, 1, 0,
            (SCM actor, SCM points, SCM color),
            "Updates a line return true if successful. Expects a line actor, a list of size three vectors, and a size 4 vector for color optionally.")
{
  struct vlref *ref = unwrap_vlref(actor);
  vl::ref<vl::Actor> vlactor = (vl::Actor *) ref->object;
  vl::ref<vl::Geometry> geom = (vl::Geometry *) vlactor->lod(0);
  vl::ref<vl::ArrayFloat3> array = (vl::ArrayFloat3 *) geom->vertexArray();

  size_t i = 0;
  size_t len = scm_c_length(points);
  while (i < len && scm_is_pair(points)) {
    SCM value = scm_car(points);
    (*array)[i] = vector_to_vl_vec3(value);
    points = scm_cdr(points);
    i++;
  }
  //geom->setVertexArray(array.get());
  /* geom->setDisplayListDirty(true); */
  /* geom->setBufferObjectDirty(true); */
  geom->updateDirtyBufferObject(vl::BUM_KeepRamBufferAndForceUpdate);

  return SCM_BOOL_T;
}
@



\subsection{Drawing State}

I want to try to minimize the amount of ``stuff'' I have to do in
these primitive functions.  For instance, I don't want to do a lot of
argument handling.  

\subsection{Scene Buffer}

We'd like to have a scene buffer for ERACS.

<<file:scene-smob.scm>>=
(define-module (scene-smob)
  #:use-module (logging)
  #:use-module (oop goops)
  #:use-module (emacsy emacsy)
  #:use-module (srfi srfi-1)  ; find
  #:use-module (srfi srfi-26) ; cute
  #:use-module (guile-user) ; scene-set-viewport!
  #:export (make-scene set-scene-parameter! scene-parameter scene-render add-line update-line remove-actor add-sphere <scene-buffer> scene)
  )

(define-class-public <scene-buffer> (<buffer>)
  (scene #:accessor scene #:init-keyword #:scene #:init-form (make-scene)))
(export scene)

(define-method (initialize (obj <scene-buffer>) initargs)
  (next-method)
  (when (scene obj)
    (scene-set-viewport! (scene obj) 640 480 0 10)
    (set-scene-parameter! (scene obj) 'camera-position #(0. 8. 10.)))
  obj)

(define-public (current-scene)
  (if (is-a? (current-buffer) <scene-buffer>)
    (scene (current-buffer))
    #f))

;; Grabs the most recent scene buffer may be current, skips
;; any non scene-buffers like minibuffer.
(define-public (recent-scene)
  (let ((buffer (find (cut is-a? <> <scene-buffer>) (buffer-list))))
    (and buffer (scene buffer))))

(define-public (recent-buffer)
  (find (lambda (buffer) (not (eq? buffer minibuffer))) (buffer-list)))


(define-method-public (buffer-render (buffer <scene-buffer>))
  (scene-render (scene buffer)))

(define-method-public (buffer-render (buffer <buffer>))
  (mylog "scene-smob.buffer-render" pri-debug "Don't know how to render buffer ~a" buffer))
<<+ Load scheme files.>>=
  scm_c_use_module("scene-smob");
@ 

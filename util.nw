% -*- mode: Noweb; noweb-code-mode: c-mode -*-
/section{Utility Functions}

A dumping ground for general purpose things.

<<file:util.c>>=
#include "util.h"

size_t scm_c_length(SCM list) {
  return scm_to_int(scm_length(list));
}

<<file:util.h>>=
#ifndef _UTIL_H_
#define _UTIL_H_
#include <libguile.h>
<<+ Begin C Header Guard.>>

size_t scm_c_length(SCM list);
SCM scm_c_string_to_symbol(const char *);

<<+ End C Header Guard.>>
#endif /* _UTIL_H_ */
@ 

\subsection{Scheme}

<<file:util.scm>>=
(use-modules (system repl error-handling))
<<util:procedure>>
@

<<util:procedure>>=
(define-public (my-load-file filename)
  #;(with-backtrace* (lambda () (load filename)) '(quit))
  (call-with-error-handling (lambda () 
    (format #t "~a" (current-module))
    (load filename)))
)
@ 

<<util:procedure>>=
(define (for-each-i proc lst . args)
  (apply 
   for-each proc
   lst
   (append args (list (range 1 (length lst))))))
@
  
<<util:procedure>>=
(define (for-each-i0 proc lst . args)
  (apply 
   for-each proc
   lst
   (append args (list (range 0 (1- (length lst)))))))
@


<<util:procedure>>=
(define (map-i proc lst . args)
  (apply 
   map proc
   lst
   (append args (list (range 1 (length lst))))))
@

<<util:procedure>>=
(define (map-i0 proc lst . args)
  (apply 
   map proc
   lst
   (append args (list (range 0 (1- (length lst)))))))
@


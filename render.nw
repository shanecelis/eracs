% -*- mode: Noweb; noweb-code-mode: c-mode -*-
\section{Rendering}

Now we want to actually implement the rendering.  This will mainly
make use of the VL library.

<<file:render.h>>=
#ifndef _RENDER_H_
#define _RENDER_H_

#include "scene-smob.h"

void render_init(int w, int h);
void render_setup_viewport(int w, int h);
void scene_set_viewport(struct scene*, int w, int h, int x, int y);
void render();
void scene_render(struct scene*);
void render_update_camera(void);
void scene_update_camera(struct scene*);
void scene_init();
//extern struct scene* gscene;
#endif /* _RENDER_H_ */

<<file:render.cpp>>=

<<+ Preamble>>
#include "render.h"
#include "dummy-opengl-context.hpp"
#include <libguile.h>
<<Includes>>

<<State>>

<<Functions>>

<<Primitive>>

<<Initialize>>
@ 
We have a global scene struct named [[gscene]].

<<State>>=
struct scene *gscene;
struct scene *echo_scene;
struct scene *mode_line_scene;
SCM scm_gscene;
SCM scm_echo_scene;
SCM scm_mode_line_scene;
@ 

<<Functions>>=
void render_setup_viewport(int screen_width, int screen_height)
{
  struct scene *scene = scm_c_current_scene();
  if (scene)
    scene_set_viewport(scene, 
                       screen_width, 
                       screen_height - echo_area_height - mode_line_height, 
                       0, 
                       echo_area_height + mode_line_height);

  scene_set_viewport(echo_scene, 
                     screen_width, echo_area_height, 
                     0, 0);

  scene_set_viewport(mode_line_scene, 
                     screen_width, mode_line_height, 
                     0, echo_area_height);
}
@ 

<<Primitive>>=
SCM_DEFINE (scm_scene_set_viewport_x, "scene-set-viewport!", 
           /* required args */ 5, 
           /* optional args */ 0, 
           /* rest args?    */ 0,
            (SCM scene, SCM w, SCM h, SCM x, SCM y),
            "Set the viewport of the scene.  Lower left corner is the origin.")
{
  scene_set_viewport(unwrap_scene(scene), 
                     scm_to_int(w),
                     scm_to_int(h),
                     scm_to_int(x),
                     scm_to_int(y));
  return SCM_UNSPECIFIED;
}


<<Functions>>=
void scene_set_viewport(struct scene* scene, int screen_width, int screen_height, int x, int y)
{
  scene->rendering->camera()->viewport()->setWidth(screen_width);
  scene->rendering->camera()->viewport()->setHeight(screen_height);
  scene->rendering->camera()->viewport()->setX(x);
  scene->rendering->camera()->viewport()->setY(y);

  //vl::ref<vl::Rendering> renderer3 = scene->main_rendering->subRenderings()[0];
  /* renderer3->camera()->viewport()->setWidth(screen_width); */
  /* renderer3->camera()->viewport()->setHeight(echo_area_height); */
  /* renderer3->camera()->viewport()->setX(0); */
  /* renderer3->camera()->viewport()->setY(0); */
}
<<Functions>>=

void render_init(int screen_width, int screen_height)
{
  vl::ref<vl::Effect> effect;

  <<Setup the SCM scene object.>>

  <<Setup the SCM echo scene.>>

  <<Setup the SCM mode line scene.>>

  <<Setup echo area.>>
      
  <<Setup cursor.>>

  <<Setup mode line.>>
}
@ 

<<Setup the SCM scene object.>>=
  //scm_gscene = scm_wrap_scene(gscene);
  scm_gscene = scm_make_scene();
  gscene = unwrap_scene(scm_gscene);
  scm_c_define("gscene", scm_gscene);
  scm_permanent_object(scm_gscene);
@ 

<<Setup the SCM echo scene.>>=
  scm_echo_scene = scm_make_scene();
  echo_scene = unwrap_scene(scm_echo_scene);
  scm_c_define("echo_scene", scm_echo_scene);
  scm_permanent_object(scm_echo_scene);
@ 

<<Setup the SCM mode line scene.>>=
  scm_mode_line_scene = scm_make_scene();
  mode_line_scene = unwrap_scene(scm_mode_line_scene);
  vl::vec4 background_color(90.f/255.f, 122.f/255.f, 186/255.f, 1.f);
  mode_line_scene->rendering->camera()->viewport()->setClearColor(background_color);
  scm_c_define("mode_line_scene", scm_mode_line_scene);
  scm_permanent_object(scm_mode_line_scene);
@ 
<<Functions>>=
void render()
{
  //scene_render(gscene);
  struct scene* scene = scm_c_current_scene();
  if (scene)
    scene_render(scene);
  scene_render(mode_line_scene);
  scene_render(echo_scene);
}
@

<<Primitive>>=
SCM_DEFINE (scm_scene_render, "scene-render", 
           /* required args */ 1, 
           /* optional args */ 0, 
           /* rest args?    */ 0,
            (SCM scene),
            "Render the scene.")
{
  scene_render(unwrap_scene(scene));
  return SCM_UNSPECIFIED;
}


<<Functions>>=
void scene_render(struct scene* scene)
{ 
  //scene->rendering->renderer()->setFramebuffer(glcontext->framebuffer());
  <<Before render>>
  <<Calculate FPS.>>

  scene->main_rendering->render();  
}
<<Calculate FPS.>>=

static unsigned int frame_count = 0;
static double start_time = vl::Time::currentTime(); 
if (frame_count != 0) {
  double time = (vl::Time::currentTime() - start_time);
  scene->render_fps = (double) frame_count/time;
  if (time > 1.0) {
    frame_count = 0;
    start_time = vl::Time::currentTime(); 
  }
    
}
frame_count++;
@ 

<<Primitive>>=
SCM_DEFINE (scm_scene_update_camera, "scene-update-camera", 
           /* required args */ 1, 
           /* optional args */ 0, 
           /* rest args?    */ 0,
            (SCM scene),
            "Update the camera for the scene }.")
{
  scene_update_camera(unwrap_scene(scene));
  return SCM_UNSPECIFIED;
}
@ 
<<file:render.cpp>>=
void scene_update_camera(struct scene *scene) {
  vl::mat4 view_mat = vl::mat4::getLookAt(scene->eye, scene->center, scene->up);
  scene->rendering->camera()->setViewMatrix( view_mat );
}
void render_update_camera() {
  scene_update_camera(gscene);
}
@ %def render_update_camera

\subsection{Render Message or Echo Area}

We want to display the message or echo area at the bottom left of the
window as Emacs would typically do.  We'll need to include the Emacsy
header file.

<<Includes>>=
#ifndef SCM_MAGIC_SNARFER
#include <emacsy.h>
#endif
@ We'll keep the text as global state.

<<State>>=
  vl::ref<vl::Text> echo_area;
  const int echo_area_height = 20; /* XXX this should be dynamic with font size */
  const int mode_line_height = 20; /* XXX this should be dynamic with font size */
@ We will refresh the state from Emacsy with each render.

\todo{This echo_area should be handled more carefully.  It needs to
  deal with text that's too large (that can slow down the whole
  program), and it needs to resize the minibuffer window when
  necessary.}
<<Before render>>=
  echo_area->setText(vl::String(emacsy_message_or_echo_area()));
@ Setting up the echo area is a little complicated.

<<State>>=
vl::ref<vl::Rendering> renderer3;
@ \end{multicols}

<<Setup echo area.>>=
  vl::ref<vl::Font> font;
  font = vl::defFontManager()->acquireFont("/Library/Fonts/Andale Mono.ttf", 
                                           12);
  vl::ref<vl::SceneManagerActorTree> scene_manager_text;
  //scene_manager_text = new vl::SceneManagerActorTree;  
  scene_manager_text = echo_scene->scene_manager.get();
  echo_area = new vl::Text;
  echo_area->setFont(font.get());
  echo_area->setKerningEnabled(true);
  echo_area->setText( L"line 1\nline2\nline3\nline4\n");
  echo_area->setMode(vl::Text2D);
  //echo_area->setTextAlignment( vl::TextAlignJustify );
  int alignment = vl::AlignTop | vl::AlignLeft;
  echo_area->setAlignment(alignment);
  echo_area->setViewportAlignment(alignment);
  //echo_area->setBorderEnabled(false);
  echo_area->setBackgroundEnabled(false);
  echo_area->setColor( vl::white );
  //echo_area->translate(-100.f, 0.f, 0.f);
  //renderer3 = new vl::Rendering;

  echo_scene->rendering->camera()->viewport()->setClearColor(vl::black);
  //echo_scene->rendering->sceneManagers()->push_back(scene_manager_text.get());
  echo_scene->rendering->renderer()->setFramebuffer(glcontext->framebuffer());

  effect = new vl::Effect;
  effect->shader()->enable(vl::EN_BLEND);
  scene_manager_text->tree()->addActor( echo_area.get(), effect.get() );
  //gscene->main_rendering->subRenderings()->push_back(renderer3.get());
@ \begin{multicols}{2}

<<State>>=
  vl::ref<vl::Text> cursor;
@ 
<<Setup cursor.>>=
  cursor = new vl::Text;
  cursor->setFont(font.get());
  cursor->setKerningEnabled(true);
  cursor->setText( L"|");
  cursor->setMode(vl::Text2D);
  alignment = vl::AlignTop | vl::AlignLeft;
  cursor->setAlignment(alignment);
  cursor->setViewportAlignment(alignment);
  cursor->setBackgroundEnabled(false);
  cursor->setColor(vl::white);
  cursor->translate(10.f, 0.f, 0.f);
  scene_manager_text->tree()->addActor(cursor.get(), 
                                       effect.get());
@ 
<<Before render>>=
  int point = emacsy_minibuffer_point();
  float font_width = 10.f;
  cursor->resetMatrix();
  if (point != -1) 
    cursor->translate(((float)point - 1.25f) * font_width, 0.f, 0.f);
  else
    cursor->translate(-100.f, 0.f, 0.f);
@ \subsection{Render Mode Line}
Now let's setup the mode line.  

<<State>>=
  vl::ref<vl::Text> mode_line;
@ 
<<Setup mode line.>>=
  mode_line = new vl::Text;
  mode_line->setFont(font.get());
  mode_line->setKerningEnabled(true);
  mode_line->setText(L"");
  mode_line->setMode(vl::Text2D);
  mode_line->setTextAlignment(vl::TextAlignJustify);
  alignment = vl::AlignBottom | vl::AlignLeft;
  mode_line->setAlignment(alignment);
  mode_line->setViewportAlignment(alignment);
  //mode_line->setBorderEnabled(true);
  //mode_line->setBackgroundEnabled(true);
  mode_line->setColor(vl::white);
  vl::fvec4 bg = vl::gray;
  bg.a() = 0.3;
  mode_line->setBackgroundColor(bg);
  vl::ref<vl::ActorTree> tree = new vl::ActorTree();
  tree->addActor(mode_line.get(), 
                 effect.get());
  mode_line_scene->scene_manager->tree()->addChild(tree.get());
@ 
<<Before render>>=
  mode_line->setText(vl::String(emacsy_mode_line()));
@ VL requires an OpenGLContext object.  I implement it extremely
minimally because I do not want to use VL's GUI abstraction layer. 

<<OpenGL Context>>=
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define SCREEN_DEPTH 8

/* 
   DummyOpenGLContext implements the required abstract methods of
   OpenGLContext.  My use case is that I do not want to use VL's GUI
   wrappers.  I want to use VL for gscene->rendering only.
*/
class DummyOpenGLContext : public vl::OpenGLContext {
public: 
  DummyOpenGLContext();
  virtual void swapBuffers();
  virtual void makeCurrent();
  virtual void update();
};
@ %def DummyOpenGLContext
<<file:dummy-opengl-context.hpp>>=

#include <vlGraphics/OpenGLContext.hpp>
<<OpenGL Context>>
<<file:dummy-opengl-context.cpp>>=

#include "dummy-opengl-context.hpp"

DummyOpenGLContext::DummyOpenGLContext() 
  : OpenGLContext(SCREEN_WIDTH, SCREEN_HEIGHT) {
  initGLContext();
}
void DummyOpenGLContext::swapBuffers() { }
void DummyOpenGLContext::makeCurrent() { }
void DummyOpenGLContext::update() { }
<<Includes>>=
#include <vlCore/VisualizationLibrary.hpp>
#include <vlCore/Time.hpp>
#include <vlGraphics/Rendering.hpp>
#include <vlGraphics/RenderingTree.hpp>
#include <vlGraphics/SceneManagerActorTree.hpp>
#include <vlGraphics/Geometry.hpp>
#include <vlGraphics/OpenGLContext.hpp>
#include <vlGraphics/GeometryPrimitives.hpp>
#include <vlGraphics/Light.hpp>
#include <vlGraphics/Text.hpp>
#include <vlGraphics/FontManager.hpp>
@
\subsection{Scheme Primitives}

One should be able to manipulate rendered objects in Scheme.  I want
to keep this API small.  I don't want to even try to expose all the
functionality VL provides.  It's sufficient for my purposes to be able
to draw text and boxes.  Instead of making all the properties of these
like color, texture, and lighting configurable, I'm going to make
collections of properties available, so one would define the property
in C++ but select it in Scheme.

<<Initialize>>=
void scene_init() {
#ifndef SCM_MAGIC_SNARFER 
#include "render.cpp.x" 
#endif
}
@ 

<<+ Initialize submodules.>>=
scene_init();
@

